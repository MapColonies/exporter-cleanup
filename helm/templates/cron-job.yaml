{{- $releaseName := .Release.Name -}}
{{- $chartName := include "exporter-cleanup.name" . -}}
{{- $cloudProviderFlavor := include "exporter-cleanup.cloudProviderFlavor" . -}}
{{- $cloudProviderDockerRegistryUrl := include "exporter-cleanup.cloudProviderDockerRegistryUrl" . -}}
{{- $cloudProviderImagePullSecretName := include "exporter-cleanup.cloudProviderImagePullSecretName" . -}}
{{- $imageTag := include "ts-server-boilerplate.tag" . -}}
{{- $fs := (include "common.fs.merged" .) | fromYaml }}
{{- $s3 := (include "common.s3.merged" .) | fromYaml }}
{{- $configmapName := include "configmap.fullname" . }}
{{- $storage := (include "common.storage.merged" .) | fromYaml }}
{{- $cronjobName := include "cronjob.fullname" . -}}
{{- if .Values.enabled -}}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ $cronjobName }}
  labels:
    app: {{ $chartName }}
    component: {{ $chartName }}
    environment: {{ include "exporter-cleanup.environment" . }}
    release: {{ $releaseName }}
    {{- include "exporter-cleanup.labels" . | nindent 4 }}
spec:
  schedule: {{ .Values.cron.schedule | quote }}
  successfulJobsHistoryLimit: {{ .Values.cron.successfulJobsHistoryLimit }}
  failedJobsHistoryLimit: {{ .Values.cron.failedJobsHistoryLimit }}
  concurrencyPolicy: {{ .Values.cron.concurrencyPolicy }}
  jobTemplate:
    spec:
      template:
        metadata:
          annotations:
          {{- if .Values.podAnnotations }}
          {{- toYaml .Values.podAnnotations | nindent 12 }}
          {{- end }}
        spec:
          {{- if $cloudProviderImagePullSecretName }}
          imagePullSecrets:
            - name: {{ $cloudProviderImagePullSecretName | quote }}
          {{- end }}
          restartPolicy: {{ .Values.cron.restartPolicy }}
          {{- if $fs.internalPvc.enabled }}
          volumes:
            - name: packages-volume
              persistentVolumeClaim:
                claimName: {{ $fs.internalPvc.name }} 
          {{- end }}
          containers:
            - name: {{ $releaseName }}-{{ $chartName }}-deployment
              {{- with .Values.image }}
              image: {{ $cloudProviderDockerRegistryUrl }}{{ .repository }}:{{ $imageTag }}
              {{- end }}
              envFrom:
                - configMapRef:
                    name: {{ $configmapName }}
              env:
                {{- if $fs.internalPvc.enabled }}
                - name: FS_MOUNT_DIR
                  value: $fs.internalPvc.outputPath
                - name: FS_SUB_PATH
                  value: {{ $fs.internalPvc.gpkgSubPath }}
                {{- end }}
                {{- if eq (upper $storage.gpkgProvider) "S3" }}
                - name: S3_ACCESS_KEY_ID
                  valueFrom:
                    secretKeyRef:
                      name: {{ $s3.secretName }}
                      key: accessKeyId
                - name: S3_SECRET_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      name: {{ $s3.secretName }}
                      key: accessKeyId
                {{- end }}
              {{- if $fs.internalPvc.enabled }}
              volumeMounts:
                - name: packages-volume
                  mountPath: $fs.internalPvc.outputPath
                  subPath: {{ $fs.internalPvc.gpkgSubPath }}
              {{- end }}
              {{- if .Values.resources.enabled }}
              resources:
                {{- toYaml .Values.resources.value | nindent 16 }}
              {{- end }}
{{- end -}}
